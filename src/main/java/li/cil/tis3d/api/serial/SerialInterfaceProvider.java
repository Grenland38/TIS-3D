package li.cil.tis3d.api.serial;

import net.minecraft.util.Direction;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.registry.Registry;
import net.minecraft.world.World;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.api.distmarker.OnlyIn;
import net.minecraftforge.registries.IForgeRegistryEntry;

import javax.annotation.Nullable;
import java.util.Optional;

/**
 * Creates a serial interface instance for a specified block position.
 * <p>
 * Implementation will typically check for the presence of a specific tile
 * entity and create a wrapper for the tile entity.
 * <p>
 * Additional providers may be registered with the {@link Registry} <tt>tis3d:serial_interfaces</tt>.
 */
public interface SerialInterfaceProvider extends IForgeRegistryEntry<SerialInterfaceProvider> {
    /**
     * Checks whether the provider supports the specified block position.
     *
     * @param world    the world containing the position.
     * @param position the position in question.
     * @param side     the side of the position in question.
     * @return whether a {@link SerialInterface} can be provided for the position.
     */
    boolean matches(final World world, final BlockPos position, final Direction side);

    /**
     * Creates a new serial interface instance for the specified position.
     *
     * @param world    the world containing the position.
     * @param position the position in question.
     * @param face     the side of the position in question.
     * @return the interface to use for communicating with the position.
     */
    Optional<SerialInterface> getInterface(final World world, final BlockPos position, final Direction face);

    /**
     * A reference to a manual entry describing the protocol used by the
     * {@link SerialInterface} generated by this provider.
     * <p>
     * It is generally recommended to have one provider per interface / protocol
     * type. In case you decide you'd like to have one multi-interface provider,
     * you'll need to put all your documentation in that one manual entry, or
     * use it as an index.
     * <p>
     * While it is legal to return {@code null} here, it is strongly discouraged
     * to not have a manual entry for a protocol used by a serial interface,
     * since this will make it nearly impossible for the player to figure out
     * how to use the interface.
     * <p>
     * The links returned from all registered providers will be listed in the
     * serial protocol overview page in the TIS-3D manual as an automatically
     * populated list.
     *
     * @return the description of the link to the manual page for the interface's protocol.
     */
    @OnlyIn(Dist.CLIENT)
    Optional<SerialProtocolDocumentationReference> getDocumentationReference();

    /**
     * Tests whether the specified serial interface is still valid for the specified position.
     * <p>
     * This is used by the serial port module to determine whether a new serial
     * interface instance has to be constructed for the specified position, or
     * whether an existing one can be re-used. This avoids resetting the serial
     * interfaces state in case of an adjacent block change.
     * <p>
     * Generally this this should return <tt>false</tt> if the interface is not
     * once provided by this provider, or more generally, if it is the same kind
     * of serial interface that would be created via {@link #getInterface(World, BlockPos, Direction)},
     * otherwise this should return <tt>true</tt>.
     *
     * @param world           the world containing the position.
     * @param position        the position in question.
     * @param side            the side of the position in question.
     * @param serialInterface the interface to validate.
     * @return <tt>true</tt> if the interface is still valid, <tt>false</tt> if a new one should be created.
     */
    boolean stillValid(final World world, final BlockPos position, final Direction side, final SerialInterface serialInterface);
}
