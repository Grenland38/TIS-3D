buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'com.modrinth.minotaur' version '2.2.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply from: 'minecraft.gradle'

def getGitRef() {
    try {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (final Throwable ignored) {
        return 'unknown'
    }
}

version = "${semver}+${getGitRef()}"
group = 'li.cil.tis3d'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'utf-8'
}

repositories {
    maven {
        url 'https://cursemaven.com'
        content { includeGroup "curse.maven" }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:markdownmanual-502485:3738124")

    // Just for in-dev convenience. Mod doesn't use any JEI APIs.
    implementation fg.deobf("curse.maven:jei-238222:3735570")
}

minecraft {
    mappings channel: 'official', version: minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'tis3d'

            mods {
                tis3d {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'tis3d'

            mods {
                tis3d {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'tis3d'

            mods {
                tis3d {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'

            args '--mod', 'tis3d', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')

            mods {
                tis3d {
                    source sourceSets.main
                }
            }
        }
    }
}

task copyGeneratedResources(type: Copy) {
    from 'src/generated'
    into 'src/main'
    exclude 'resources/.cache'
}

jar {
    finalizedBy 'reobfJar'

    manifest {
        attributes([
            'FMLAT'                   : 'accesstransformer.cfg',
            'Specification-Title'     : 'tis3d',
            'Specification-Vendor'    : 'Sangar',
            'Specification-Version'   : '1',
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : "${semver}",
            'Implementation-Vendor'   : 'Sangar',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'li/cil/tis3d/api/**'
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = semver
            artifact jar
            artifact apiJar
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = System.getenv("GITHUB_MAVEN_URL") ?: ""
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    apiKey = System.getenv('CURSEFORGE_API_KEY') ?: ""
    project {
        id = curse_project_id
        releaseType = curse_project_releaseType
        changelogType = 'markdown'
        changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
        addGameVersion 'Forge'
        addGameVersion minecraft_version
        addGameVersion 'Java 17'
        relations {
            requiredDependency 'markdownmanual'
        }
    }
}

modrinth {
    token = System.getenv("MODRINTH_API_KEY") ?: ""
    projectId = modrinth_project_id
    changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
    versionNumber = "MC${minecraft_version}-${minecraft_sdk}-${semver}"
    versionName = "${rootProject.name}-${version}"
    versionType = 'release'
    uploadFile = jar
    gameVersions = [minecraft_version]
    dependencies {
        required.project 'nPQ9xkPg' // Markdown Manual
    }
}

idea {
    module {
        for (final String exclude in ['run', 'out', 'logs', 'src/generated']) {
            excludeDirs += file(exclude)
        }
    }
}
